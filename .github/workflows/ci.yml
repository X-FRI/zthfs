name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose

    - name: Run benchmark tests
      run: cargo bench --verbose

    - name: Generate test coverage
      run: |
        cargo install cargo-llvm-cov
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: lcov.info
        fail_ci_if_error: false

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Check for vulnerabilities
      run: |
        cargo install cargo-audit
        cargo audit --ignore-yaml --format json > audit-results.json || true

    - name: Upload security results
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-results
        path: audit-results.json

  build:
    name: Build Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      env:
        CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: zthfs-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/zthfs

  documentation:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Generate documentation
      run: cargo doc --no-deps --document-private-items

    - name: Check documentation links
      run: |
        cargo doc --no-deps
        # Add link checking here if needed

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc/

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y fuse libfuse-dev

    - name: Run integration tests
      run: |
        # Note: Integration tests not yet implemented
        echo "Integration tests not yet implemented - skipping"
        # sudo -E PATH="$PATH" cargo test --test integration -- --nocapture
      env:
        USER: root
        HOME: /root

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: llvm-tools-preview

    - name: Install performance tools
      run: |
        cargo install --git https://github.com/flamegraph-rs/flamegraph

    - name: Run performance benchmarks
      run: |
        cargo bench -- --nocapture --output-format bencher | tee benchmark-results.txt

    - name: Generate flamegraph
      run: |
        cargo flamegraph --bin zthfs -- demo

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          benchmark-results.txt
          flamegraph.svg
